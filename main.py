import pandas as pd
from scipy import stats
import numpy as np
print("ZADANIE1")
# ะะฐะณััะทะธัะต ะดะฐะฝะฝัะต ะธะท Excel
xls = pd.ExcelFile('var4.xls')

# ะงะธัะฐะตะผ ะดะฐะฝะฝัะต ะธะท ะปะธััะพะฒ
sheet1 = xls.parse('Sheet1')
sheet2 = xls.parse('Sheet2')

# ะะพะปััะฐะตะผ ะดะฐะฝะฝัะต ะดะพ ะธ ะฟะพัะปะต ะฒะพะทะดะตะนััะฒะธั
before = sheet2['Z5A']
after = sheet2['Z5B']

# ะฃะดะฐะปะตะฝะธะต ะทะฝะฐัะตะฝะธะน NaN
before = [x for x in before if str(x) != 'nan']
after = [x for x in after if str(x) != 'nan']

# ะะพะปััะฐะตะผ ััะพะฒะตะฝั ะทะฝะฐัะธะผะพััะธ ะธ ะฝะฐะฟัะฐะฒะปะตะฝะธะต ะพะถะธะดะฐะฝะธะน ะธััะปะตะดะพะฒะฐัะตะปั
alpha = 0.05
expectation = 'increase'

# ะััะธัะปัะตะผ ัะฐะทะฝะพััะธ
diff = np.array(before) - np.array(after)

# ะััะธัะปัะตะผ ััะตะดะฝะตะต ะธ ััะฐะฝะดะฐััะฝะพะต ะพัะบะปะพะฝะตะฝะธะต
mean_diff = np.mean(diff)
std_diff = np.std(diff, ddof=1)

# ะััะธัะปัะตะผ ััะฐัะธััะธะบั ะกัััะดะตะฝัะฐ
T = mean_diff / (std_diff / np.sqrt(len(before)))

# ะััะธัะปัะตะผ p-value
if expectation == 'increase':
    p_value = 1 - stats.t.cdf(T, df=len(before)-1)
else:
    p_value = stats.t.cdf(T, df=len(before)-1)

# ะัะฒะพะดะธะผ ัะตะทัะปััะฐัั
print("ะะพ:")
print(f"ะะฑัะตะผ ะฒัะฑะพัะบะธ: {len(before)}")
print(f"ะกัะตะดะฝะตะต: {np.mean(before):.2f}")
print(f"ะกัะฐะฝะด. ะพัะบะปะพะฝะตะฝะธะต: {np.std(before, ddof=1):.2f}")
print(f"ะกัะฐะฝะด. ะพัะธะฑะบะฐ ััะตะดะฝะตะณะพ: {np.std(before, ddof=1) / np.sqrt(len(before)):.2f}")

print("\nะะพัะปะต:")
print(f"ะะฑัะตะผ ะฒัะฑะพัะบะธ: {len(after)}")
print(f"ะกัะตะดะฝะตะต: {np.mean(after):.2f}")
print(f"ะกัะฐะฝะด. ะพัะบะปะพะฝะตะฝะธะต: {np.std(after, ddof=1):.2f}")
print(f"ะกัะฐะฝะด. ะพัะธะฑะบะฐ ััะตะดะฝะตะณะพ: {np.std(after, ddof=1) / np.sqrt(len(after)):.2f}")

print("\nะะพ ัะฐะทะฝะพัััะผ:")
print(f"ะะฑัะตะผ ะฒัะฑะพัะบะธ: {len(diff)}")
print(f"ะกัะตะดะฝะตะต: {mean_diff:.2f}")
print(f"ะกัะฐะฝะด. ะพัะบะปะพะฝะตะฝะธะต: {std_diff:.2f}")
print(f"ะกัะฐะฝะด. ะพัะธะฑะบะฐ ััะตะดะฝะตะณะพ: {std_diff / np.sqrt(len(diff)):.2f}")
print(f"\n5%-ะฐั ะบัะธัะธัะตัะบะฐั ะพะฑะปะฐััั: T >= {stats.t.ppf(1 - alpha, df=len(before)-1):.2f}")
print(f"\nC_Alpha: = {stats.t.ppf(1 - alpha, df=len(before)-1):.2f}")
print(f"ะกัะฐัะธััะธะบะฐ ะกัััะดะตะฝัะฐ: {T}")
print(f"ะก ะบัะธัะธัะตัะบะธะผ ััะพะฒะฝะตะผ ะทะฝะฐัะธะผะพััะธ ๐๐ฃ๐๐๐ข๐ = {p_value}")

if p_value < alpha:
    print("ะัะฒะพะด: ะัะปะตะฒะฐั ะณะธะฟะพัะตะทะฐ ะพัะฒะตัะณะฐะตััั")
else:
    print("ะัะฒะพะด: ะัะปะตะฒะฐั ะณะธะฟะพัะตะทะฐ ะฟัะธะฝะธะผะฐะตััั")


import pandas as pd
from scipy import stats
import numpy as np
print("ZADANIE2")
# ะะฐะณััะทะธัะต ะดะฐะฝะฝัะต ะธะท Excel
xls = pd.ExcelFile('var4.xls')

# ะงะธัะฐะตะผ ะดะฐะฝะฝัะต ะธะท ะปะธััะฐ 'Sheet2'
sheet2 = xls.parse('Sheet2')

# ะะพะปััะฐะตะผ ะดะฐะฝะฝัะต ะดะปั ะดะฒัั ะฟัะธะฑะพัะพะฒ
device1 = sheet2['Z9A']
device2 = sheet2['Z9B']

# ะฃะดะฐะปะตะฝะธะต ะทะฝะฐัะตะฝะธะน NaN
device1 = [x for x in device1 if str(x) != 'nan']
device2 = [x for x in device2 if str(x) != 'nan']

# ะะพะปััะฐะตะผ ััะพะฒะตะฝั ะทะฝะฐัะธะผะพััะธ
alpha = 0.025  # ะะฐะผะตะฝะธัะต ะฝะฐ ะฒะฐัะต ะทะฝะฐัะตะฝะธะต alpha

# ะััะธัะปัะตะผ ะดะธัะฟะตััะธะธ
var1 = np.var(device1, ddof=1)
var2 = np.var(device2, ddof=1)

# ะัะพะฒะพะดะธะผ ะดะฒะฐ ัะตััะฐ ะคะธัะตัะฐ
for expectation in ['less', 'greater']:
    # ะััะธัะปัะตะผ ััะฐัะธััะธะบั F
    F = var1 / var2 if expectation == 'greater' else var2 / var1

    # ะััะธัะปัะตะผ p-value
    df1 = len(device1) - 1
    df2 = len(device2) - 1
    p_value = 1 - stats.f.cdf(F, df1, df2) if expectation == 'greater' else stats.f.cdf(F, df1, df2)

    # ะััะธัะปัะตะผ ะบัะธัะธัะตัะบัั ะบะพะฝััะฐะฝัั C_alpha
    C_alpha = stats.f.ppf(1 - alpha, df1, df2) if expectation == 'greater' else stats.f.ppf(alpha, df1, df2)

    # ะัะฒะพะดะธะผ ัะตะทัะปััะฐัั ะดะปั ะบะฐะถะดะพะณะพ ะฟัะธะฑะพัะฐ
    for i, device in enumerate([device1, device2], start=1):
        print(f"\nะัะธะฑะพั {i}:")
        print(f"ะะฑัะตะผ ะฒัะฑะพัะบะธ: {len(device)}")
        print(f"ะกัะตะดะฝะตะต: {np.mean(device):.2f}")
        print(f"ะะตัะผะตัะตะฝะฝะฐั ะพัะตะฝะบะฐ ะดะธัะฟะตััะธะธ: {np.var(device, ddof=1):.2f}")

    print(f"\nะะถะธะดะฐะฝะธะต: {expectation}")
    print(f"ะกัะฐัะธััะธะบะฐ F: {F:.2f}")
    print(f"p-value: {p_value:.3f}")
    print(f"ะัะธัะธัะตัะบะฐั ะบะพะฝััะฐะฝัะฐ C_alpha: {C_alpha:.2f}")

    if p_value < alpha:
        print("ะัะฒะพะด: ะัะปะตะฒะฐั ะณะธะฟะพัะตะทะฐ ะพัะฒะตัะณะฐะตััั")
    else:
        print("ะัะฒะพะด: ะัะปะตะฒะฐั ะณะธะฟะพัะตะทะฐ ะฟัะธะฝะธะผะฐะตััั")

import pandas as pd
from statsmodels.stats.proportion import proportions_ztest
print("ZADANIE3")
# ะะฐะณััะทะธัะต ะดะฐะฝะฝัะต ะธะท Excel
xls = pd.ExcelFile('var4.xls')

# ะงะธัะฐะตะผ ะดะฐะฝะฝัะต ะธะท ะปะธััะฐ 'Sheet2'
sheet2 = xls.parse('Sheet2')

# ะะพะปััะฐะตะผ ะดะฐะฝะฝัะต ะดะปั ัะพะฑััะธั A
event_A = sheet2['Z6I']

# ะฃะดะฐะปะตะฝะธะต ะทะฝะฐัะตะฝะธะน NaN
event_A = [x for x in event_A if str(x) != 'nan']

# ะะพะดััะตั ัะฐััะพัั ะฟะพัะฒะปะตะฝะธั A
freq_A = event_A.count('A')
total_events = len(event_A)
p_A = freq_A / total_events

print(f"ะงะฐััะพัะฐ ะฟะพัะฒะปะตะฝะธั A: {freq_A}")

# ะัะพะฒะตัะบะฐ ะณะธะฟะพัะตะทั
# H0: p = 0.5
# H1: p < 0.5
alpha = 0.05
z, pvalue = proportions_ztest(freq_A, total_events, 0.2, alternative='smaller')

if pvalue < alpha:
    print("ะัะปะตะฒะฐั ะณะธะฟะพัะตะทะฐ ะพัะฒะตัะณะฐะตััั, pvalue =", pvalue)
else:
    print("ะัะปะตะฒะฐั ะณะธะฟะพัะตะทะฐ ะฟัะธะฝะธะผะฐะตััั, pvalue =", pvalue)


import numpy as np
import pandas as pd
import scipy.stats as stats
import matplotlib.pyplot as plt
print("ZADANIE4")
# ะะฐะณััะทะบะฐ ะดะฐะฝะฝัั ะธะท ัะฐะนะปะฐ Excel
xls_file = pd.ExcelFile('var4.xls')
df = xls_file.parse('Sheet2')
alpha = 0.025
# ะกะพะทะดะฐะฝะธะต ะดะฒัั ะณััะฟะฟ
group1 = df['Z8A'].dropna().values
group2 = df['Z8B'].dropna().values

# ะัะฟะพะปะฝะตะฝะธะต ัะตััะฐ ะะธะปะบะพะบัะพะฝะฐ
statistic, p_value = stats.ranksums(group1, group2)

# ะะฟัะตะดะตะปะตะฝะธะต ะฝะฐะฟัะฐะฒะปะตะฝะธั ะพะถะธะดะฐะฝะธะน ะธััะปะตะดะพะฒะฐัะตะปั
if p_value < alpha:
    direction = "ะฑะพะปััะต"
else:
    direction = "ะผะตะฝััะต"

# ะะพะฟะพะปะฝะธัะตะปัะฝัะต ัะตะทัะปััะฐัั
sample_size_group1 = len(group1)
sample_size_group2 = len(group2)
W_sum = np.sum(stats.rankdata(np.concatenate((group1, group2))))
mu_W = sample_size_group1 * (sample_size_group1 + sample_size_group2 + 1) / 2
sigma_W = np.sqrt(sample_size_group1 * sample_size_group2 * (sample_size_group1 + sample_size_group2 + 1) / 12)

# ะัะฒะพะด ัะตะทัะปััะฐัะพะฒ
print(f"ะฃัะพะฒะตะฝั ะทะฝะฐัะธะผะพััะธ (ะฐะปััะฐ): {alpha:.4f}")
print(f"ะะฑัะตะผ ะฒัะฑะพัะบะธ (group1): {sample_size_group1}")
print(f"ะะฑัะตะผ ะฒัะฑะพัะบะธ (group2): {sample_size_group2}")
print(f"ะกัะผะผะฐ ัะฐะฝะณะพะฒ (W): {W_sum:.4f}")
print(f"ะะฐัะตะผะฐัะธัะตัะบะพะต ะพะถะธะดะฐะฝะธะต ัะฐะฝะณะฐ (๐W): {mu_W:.4f}")
print(f"ะกัะฐะฝะดะฐััะฝะพะต ะพัะบะปะพะฝะตะฝะธะต ัะฐะฝะณะพะฒ (๐W): {sigma_W:.4f}")
print(f"ะกัะฐัะธััะธะบะฐ ัะตััะฐ ะะธะปะบะพะบัะพะฝะฐ: {abs(statistic):.4f}")  # ะัะฟัะฐะฒะปะตะฝะพ: ะฑะตัะตะผ ะฐะฑัะพะปััะฝะพะต ะทะฝะฐัะตะฝะธะต
print(f"p-ะทะฝะฐัะตะฝะธะต: {p_value:.4f}")
print(f"ะะถะธะดะฐะฝะธะต ะธััะปะตะดะพะฒะฐัะตะปั: ะกัะตะดะฝะธะน ัะฐะฝะณ {direction} ะผะตะถะดั ะดะฒัะผั ะณััะฟะฟะฐะผะธ.")
if p_value < alpha:
    print("ะัะปะตะฒะฐั ะณะธะฟะพัะตะทะฐ ะพัะฒะตัะณะฐะตััั")
else:
    print("ะัะปะตะฒะฐั ะณะธะฟะพัะตะทะฐ ะฝะต ะพัะฒะตัะณะฐะตััั")
# ะกะพะทะดะฐะฝะธะต ะณัะฐัะธะบะพะฒ ะปะธะฝะธะน ะดะปั ัะผะฟะธัะธัะตัะบะธั ััะฝะบัะธะน ัะฐัะฟัะตะดะตะปะตะฝะธั
plt.figure(figsize=(8, 6))
plt.plot(np.sort(group1), np.arange(1, len(group1) + 1) / len(group1), label='Group 1', color='blue')
plt.plot(np.sort(group2), np.arange(1, len(group2) + 1) / len(group2), label='Group 2', color='orange')
plt.xlabel('Value')
plt.ylabel('ะัะผัะปััะธะฒะฝะฐั ะฒะตัะพััะฝะพััั')
plt.title('ะกัะฐะฒะฝะตะฝะธะต ัะผะฟะธัะธัะตัะบะธั ััะฝะบัะธะน ัะฐัะฟัะตะดะตะปะตะฝะธั')
plt.legend()
plt.grid(True)
plt.show()

import pandas as pd
from scipy.stats import chi2
print("ZADANIE5")
# ะะดะตัั ะฒััะฐะฒััะต ะฝะฐะทะฒะฐะฝะธะต ะฒะฐัะตะณะพ ัะฐะนะปะฐ Excel
file_name = "var4.xls"

# ะะดะตัั ะฒััะฐะฒััะต ะฝะฐะทะฒะฐะฝะธั ะฟะตัะตะผะตะฝะฝัั ะธ ััะพะปะฑัะพะฒ
alpha = 0.025  # ะฃัะพะฒะตะฝั ะทะฝะฐัะธะผะพััะธ
delta = 1.0  # ะะพะณัะตัะฝะพััั
x0 = 18.8  # ะะฐัะฐะปัะฝะพะต ะฟัะธะฑะปะธะถะตะฝะธะต

group1_column = "Z10A"
group2_column = "Z10B"

# ะงัะตะฝะธะต ะดะฐะฝะฝัั ะธะท Excel
data = pd.read_excel(file_name, sheet_name=1)  # ะัะตะดะฟะพะปะฐะณะฐะตััั, ััะพ ะดะฐะฝะฝัะต ะฝะฐัะพะดัััั ะฝะฐ ะฒัะพัะพะน ัััะฐะฝะธัะต

# ะัะดะตะปะตะฝะธะต ะฒัะฑะพัะพะบ ะธะท ะดะฒัั ะณััะฟะฟ
group1 = data[group1_column].values
group2 = data[group2_column].values


# ะคัะฝะบัะธั ะดะปั ะฒััะธัะปะตะฝะธั ััะฐัะธััะธะบะธ ะบัะธัะตัะธั ัะธ-ะบะฒะฐะดัะฐั
def chi_square_statistic(group1, group2):
    n1 = len(group1)
    n2 = len(group2)
    r = min(len(set(group1)), len(set(group2)))  # ะะพะปะธัะตััะฒะพ ะธะฝัะตัะฒะฐะปะพะฒ

    observed_freq_group1 = pd.Series(group1).value_counts(sort=False)
    observed_freq_group2 = pd.Series(group2).value_counts(sort=False)

    chi_square = 0
    for j in range(r):
        nu_j1 = observed_freq_group1.get(j, 0)
        nu_j2 = observed_freq_group2.get(j, 0)
        nu_j_star = nu_j1 + nu_j2

        if nu_j_star != 0:  # ะัะพะฒะตัะบะฐ ะฝะฐ ะฝะพะปั
            chi_square += ((nu_j1 / n1) - (nu_j2 / n2)) ** 2 / nu_j_star

    chi_square *= n1 * n2
    return chi_square


# ะััะธัะปะตะฝะธะต ััะฐัะธััะธะบะธ ะบัะธัะตัะธั
X2 = chi_square_statistic(group1, group2)

# ะะฐัะพะถะดะตะฝะธะต ะบัะธัะธัะตัะบะพะน ะบะพะฝััะฐะฝัั
df = min(len(set(group1)), len(set(group2))) - 1
critical_value = chi2.ppf(1 - alpha, df)

# ะัะฒะพะด ัะตะทัะปััะฐัะพะฒ
print("ะกัะฐัะธััะธะบะฐ ะบัะธัะตัะธั ะฅะธ-ะบะฒะฐะดัะฐั:", X2)
print("ะัะธัะธัะตัะบะฐั ะบะพะฝััะฐะฝัะฐ:", critical_value)

# ะัะพะฒะตัะบะฐ ะณะธะฟะพัะตะทั
if X2 > critical_value:
    print("ะัะฒะตัะณะฐะตะผ ะฝัะปะตะฒัั ะณะธะฟะพัะตะทั: ะดะฐะฝะฝัะต ะฝะต ะพะดะฝะพัะพะดะฝั.")
else:
    print("ะัะธะฝะธะผะฐะตะผ ะฝัะปะตะฒัั ะณะธะฟะพัะตะทั: ะดะฐะฝะฝัะต ะพะดะฝะพัะพะดะฝั.")

# ะััะธัะปะตะฝะธะต p-value
p_value = 1 - chi2.cdf(X2, df)
print("p-value:", p_value)

# ะัะฒะพะด ัะตะทัะปััะฐัะฐ ะฝะฐ ะพัะฝะพะฒะต p-value
if p_value < alpha:
    print("ะัะฒะตัะณะฐะตะผ ะฝัะปะตะฒัั ะณะธะฟะพัะตะทั: ะดะฐะฝะฝัะต ะฝะต ะพะดะฝะพัะพะดะฝั.")
else:
    print("ะัะธะฝะธะผะฐะตะผ ะฝัะปะตะฒัั ะณะธะฟะพัะตะทั: ะดะฐะฝะฝัะต ะพะดะฝะพัะพะดะฝั.")
